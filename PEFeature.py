import pefile
import os


class PEFeature(object):

    def __init__(self, feature_dict, freq_dict):
        self.feature_dict = feature_dict
        self.freq_dict = freq_dict
        self.feature_index = {}
        self.parsed_count = 0
        self.not_parsed_count = 0

    def save(self, filename = "model/feature.collection.pickle"):
        with open(filename, mode="wb") as f:
            pickle.dump(self,f)
    @classmethod
    def load(cls, filename):
        if os.path.isfile(filename):
            with open(filename, mode="rb") as f:
                return pickle.load(f)
        else:
            print filename, "not a file"
            return None

    def filter_feature_dict(self, min_freq = 2):
        # filter with min_freq
        index = 0
        for key in self.feature_dict.keys():
            if self.freq_dict[key] < min_freq:
                a.feature_dict.pop(key, None)
                continue
            self.feature_index[key] = index
            index+=1

    @classmethod
    def parse_file(cls, filepath):
        # just check and parse PE file
        try:
            return pefile.PE(filepath)
        except:
            return None

    def count_freq(self, key):
        if key in self.freq_dict.keys():
            self.freq_dict[key] += 1
        else:
            self.freq_dict[key] = 1

    def collect_feature_from_file(self, filepath):
        pe = PEFeature.parse_file(filepath)
        if pe == None:
            self.not_parsed_count +=1
            return None
        self.parsed_count +=1
        self.extract_feature_from_dos_header(pe.DOS_HEADER)
        self.extract_feature_from_nt_header(pe.NT_HEADERS)
        self.extract_feature_from_file_header(pe.FILE_HEADER)
        self.extract_feature_from_optional_header(pe.OPTIONAL_HEADER)
        self.extract_feature_from_sections(pe.sections)
        if hasattr(pe, "DIRECTORY_ENTRY_RESOURCE"):
            self.extract_feature_from_resource_type( pe.DIRECTORY_ENTRY_RESOURCE.entries)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            self.extract_feature_from_import(pe.DIRECTORY_ENTRY_IMPORT)

    def collect_feature_from_folder(self, folder_virus):
        fo_list_pe_file = open("list_parsed_virus_file.txt", mode="w")
        for i,filename in enumerate(os.listdir(folder_virus)):
            if i % 1000 == 0 :
                print "file number: ", i, self.parsed_count, self.not_parsed_count
            filepath = folder_virus + "/" + filename
            self.collect_feature_from_file(filepath)
        fo_list_pe_file.close()
        print "try  ",self.parsed_count
        print "except ",self.not_parsed_count

    @classmethod
    def collect_features_list_folder(cls, list_folder_virus):
        pefeature_collect = PEFeature(feature_dict={}, freq_dict={})
        for folder_virus in list_folder_virus:
            pefeature_collect.collect_feature_from_folder(folder_virus)
        return pefeature_collect

    def extract_key_from_header(self, header):
        """
        Parse header file which have flag like: FILE_HEADER, OPTIONAL_HEADER
        Parse header file and add feature: <key>:<value> to dictionary

        Param:
            header: object DOS_HEADER or NT_HEADER from pefile
        """
        for keys in header.__keys__:
            for key in keys:
                val = getattr(header, key)
                self.feature_dict[key] = val
                self.count_freq(key)
    def extract_flag_from_header(self, header, flag_list ,flag_name):
        """
        Parse header file which have flag like: FILE_HEADER, OPTIONAL_HEADER
        Parse header file and add feature: <key>:<value> to dictionary

        Param:
            header: object FILE_HEADER or OPTIONAL_HEADER from pefile
        """
        flags = pefile.retrieve_flags(flag_list, flag_name)
        for flag in flags:
            if getattr(header, flag[0]):
                self.feature_dict[flag[0]] = flag[1]
                self.count_freq(flag[0])
    def extract_feature_from_dos_header(self, dosheader):
        self.extract_key_from_header(dosheader)
    def extract_feature_from_nt_header(self, ntheader):
        self.extract_key_from_header(ntheader)
    def extract_feature_from_file_header(self, fileheader):
        self.extract_key_from_header(fileheader)
        self.extract_flag_from_header(fileheader,pefile.IMAGE_CHARACTERISTICS,'IMAGE_FILE_')
    def extract_feature_from_optional_header(self, optionalheader):
        self.extract_key_from_header(optionalheader)
        self.extract_flag_from_header(optionalheader,pefile.DLL_CHARACTERISTICS,'IMAGE_DLL_CHARACTERISTICS_')
    def extract_feature_from_section(self, section):
        name = section.Name.rstrip('\x00')
        self.feature_dict["%s_VAdd"%name] = section.VirtualAddress
        self.feature_dict["%s_VSize"%name] = section.Misc_VirtualSize
        self.feature_dict["%s_RSize"%name] = section.SizeOfRawData
        self.feature_dict["%s_Ent"%name] = section.get_entropy()
        self.count_freq("%s_VAdd"%name)
        self.count_freq("%s_VSize"%name)
        self.count_freq("%s_RSize"%name)
        self.count_freq("%s_Ent"%name)
    def extract_feature_from_sections(self, sections):
        """
        PE sections
        """
        for section in sections:
            self.extract_feature_from_section(section)
    def extract_feature_from_resource_type(self, entries):
        """
        Number of PE resources by type
        """
        # type_dic = dict()
        # initialize resource type
        # for type in resource_type:
        #     type_dic[type[1]] = type[0]
        #     self.feature_dict[type[0]] = 0
        # get counts of used
        # have bug if get the name of entry --
        # feature_dict["RESOURCE_TYPE_ID_<id_entry>"] = NumberOfIdEntries + NumberOfNamedEntries
        for entry in entries:
            self.feature_dict["RESOURCE_TYPE_ID_" + str(entry.id)] = entry.directory.struct.NumberOfIdEntries + entry.directory.struct.NumberOfNamedEntries
            self.count_freq("RESOURCE_TYPE_ID_" + str(entry.id))
    def extract_feature_from_import(self, imports):
        """
        PE imports - dll and API calls
        """
        for entry in imports:
            for imp in entry.imports:
                # hex(imp.address)
                self.feature_dict["%s.%s"%(entry.dll,imp.name)] = 1
                self.count_freq("%s.%s"%(entry.dll,imp.name))

    def __repr__(self):
        return str(self.feature_dict)

import pickle

if __name__ == "__main__":

    folder_virus = "/home/hynguyen/Documents/data/virus-data/Virus.Win"
    folder_virus2 = "/home/hynguyen/Documents/data/virus-data/winfile"
    folder_virus3 = "/home/hynguyen/Documents/data/virus-data/benign_file_collections"
    a = PEFeature.collect_features_list_folder([folder_virus, folder_virus2, folder_virus3])
    a.filter_feature_dict()
    a.save()
    print len(a.freq_dict.keys())
    print len(a.feature_dict.keys())



