import pefile

class PEFeature(object):

    def __init__(self, feature_dict):
        self.feature_dict = feature_dict

    def extract_key_from_header(self, header):
        """
        Parse header file which have flag like: FILE_HEADER, OPTIONAL_HEADER
        Parse header file and add feature: <key>:<value> to dictionary

        Param:
            header: object DOS_HEADER or NT_HEADER from pefile
        """
        for keys in header.__keys__:
            for key in keys:
                val = getattr(header, key)
                self.feature_dict[key] = val

    def extract_flag_from_header(self, header, flag_list ,flag_name):
        """
        Parse header file which have flag like: FILE_HEADER, OPTIONAL_HEADER
        Parse header file and add feature: <key>:<value> to dictionary

        Param:
            header: object FILE_HEADER or OPTIONAL_HEADER from pefile
        """
        flags = pefile.retrieve_flags(flag_list, flag_name)
        for flag in flags:
            if getattr(header, flag[0]):
                self.feature_dict[flag[0]] = flag[1]

    def extract_feature_from_dos_header(self, dosheader):
        self.extract_key_from_header(dosheader)

    def extract_feature_from_nt_header(self, ntheader):
        self.extract_key_from_header(ntheader)

    def extract_feature_from_file_header(self, fileheader):
        self.extract_key_from_header(fileheader)
        self.extract_flag_from_header(fileheader,pefile.IMAGE_CHARACTERISTICS,'IMAGE_FILE_')

    def extract_feature_from_optional_header(self, optionalheader):
        self.extract_key_from_header(optionalheader)
        self.extract_flag_from_header(optionalheader,pefile.DLL_CHARACTERISTICS,'IMAGE_DLL_CHARACTERISTICS_')

    def extract_feature_from_section(self, section):
        name = section.Name.rstrip('\x00')
        self.feature_dict["%s_VAdd"%name] = section.VirtualAddress
        self.feature_dict["%s_VSize"%name] = section.Misc_VirtualSize
        self.feature_dict["%s_RSize"%name] = section.SizeOfRawData
        self.feature_dict["%s_Ent"%name] = section.get_entropy()

    def extract_feature_from_sections(self, sections):
        """
        PE sections
        """
        for section in sections:
            self.extract_feature_from_section(section)

    def extract_feature_from_resource_type(self, resource_type, entries):
        """
        Number of PE resources by type
        """
        type_dic = dict()
        # initialize resource type
        for type in resource_type:
            type_dic[type[1]] = type[0]
            self.feature_dict[type[0]] = 0
        # get counts of used
        for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries:
            self.feature_dict[type_dic[entry.id]] = entry.directory.struct.NumberOfIdEntries + entry.directory.struct.NumberOfNamedEntries

    def extract_feature_from_import(self, imports):
        """
        PE imports - dll and API calls
        """
        for entry in imports:
            for imp in entry.imports:
                # hex(imp.address)
                self.feature_dict["%s.%s"%(entry.dll,imp.name)] = 1

    def __repr__(self):
        return str(self.feature_dict)

if __name__ == "__main__":

    filename = "/home/dien/workspace/virus-detection/data/GTA5Injector.exe"

    pe = pefile.PE(filename)

    # pe.dump_info()
    pefeature = PEFeature(feature_dict={})
    pefeature.extract_feature_from_dos_header(pe.DOS_HEADER)
    pefeature.extract_feature_from_nt_header(pe.NT_HEADERS)
    pefeature.extract_feature_from_file_header(pe.FILE_HEADER)
    pefeature.extract_feature_from_optional_header(pe.OPTIONAL_HEADER)
    pefeature.extract_feature_from_sections(pe.sections)
    pefeature.extract_feature_from_resource_type(pefile.resource_type, pe.DIRECTORY_ENTRY_RESOURCE.entries)
    pefeature.extract_feature_from_import(pe.DIRECTORY_ENTRY_IMPORT)
    print pefeature


